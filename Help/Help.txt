ng is java script client side front end Framework

Why Client Side ?   
*Aims to improve the user experience and improve the bussiness logic 
 e.g clicking a link a immediately page opens is called better user expereince 
these are single us 
  *****************============> run only in browser 

Que 1.Why Node JS
Ans. Node Package manager which manage our depedencies and npm for testing the application we need server (Web application ) and CLI helps to achieve these things 

Installation ?
*To install CLI npm install  -g @angular/cli
*ng new install Projectname	
*ng serve to start on development server that host our application 


Project Structure ?
 |-e2e --having all the testcases 
 |-node_modules
 |-src
    |-app 
	|-assest--static assests like photos
	|-environment--deve,testing ,or multi config
	|-index.html
	|-main.ts-starting part of the app
	|-pollyfills.ts -different broweser compatiability
	|-style.css
	|-test.ts
 |-9 json files (package.json,karma.confg.js,angular-cli.json,etc
 
 Ques How app started?
 Ans-in index.html there is no js code imports all things are added by CLI on runtime
 main.ts->platformBrowser -->
 component.ts->this application going to use these things or user defined feature 
 
 TS features ?
 |-Export can call in pther files 
 |-Decorater-

Que Component ?
Ans:- selector-app-route / '.class' is also accepted but lint give error
templaptUrl->this file holds the content when this selector found with the css mentioned in Style.

To Get the DOM native element access you can use $event

*FormsModule manage ngModel from @angular/forms

Directive are the instruction that you placed in your template Componets are a 
or 
Directive are the feature which allow to enhance your template directly from that template .enter in the template and made
 changes COMPONENTS ARE DIRECTIVES 

**npm install bootstrap --save

* we can directly include js files in the TS file like in componet.ts we can do import 'loadash' 

* If we want to add new CS file or JS file we can add in angular.json file 
 
 *ngfor is a STRUCTURAL DIRETIVE from BrowserModule 
 *ngClass that please change the css of this class e.g [ngClass]={TypeScriptObjlike "'btn-primaty'"}
 
Que : how to make tabs selected ?
Ans : by using Active property  e.g  [ngClass]="{active: chosenList === 'all'}"
 
Que: Validation on form ?
Ans: Submitted for invalid property.
     email  => <input type="email" email>  => Checks if a valid email address was entered
     minlength  => <input type="text" minlength="5">  => Checks for minimum length
     maxlength  => <input type="text" maxlength="20">  => Checks for maximum length
     pattern  => <input type="text" pattern="[a-zA-Z ]*">  => Checks for a certain RegEx pattern  
	 
	 e.g *ngIf="nameCtrl.invalid && nameCtrl.touched">Please enter a name!</span> and in input ngModel required
     #nameCtrl="ngModel">
	 
	 **On button level type="submit" [disabled]="form.invalid"
 
 
 
 **** ng Dependency works only with classes that having decorater @Injectable ,
      it allows ng to inject one service into another 
 
 
 Services ->managing data or state 
         |- Create Service 
		 |- do dependency injection by adding in the constructor 
		 |- in component and providers and also add in app.module provider section 
		 
Routing ? 
   |- import in app.module -> RouterModule in import section 
   |- then in app.module.ts create constatnt routes  of array having the path and compnent with last wild card 
        e.g 
		const routes = [
		{ path: '' , component: TabsComponent },
		{ path: 'new-character' , component : CreateCharacterComponent },
		{ path: '**' , redirectTo: '/' }
		];   
		
		WITH CHILDREN Routing 
		======================
		  const routes = [
			{ path: 'characters' , component: TabsComponent
				, children: [
						{ path: '', redirectTo: 'all', pathMatch: 'full' },
						{ path: ':side', component: ListComponent }
					]
			},
		
	|-in imports sectoin of routermodule where u define RouterModule have to call forRoot(routes)
	  e.g  RouterModule.forRoot(routes)
	  
RXJS
  |-different part can publish different data on various events and you can listen that events take the data and do whatever your requirements
  |- Subject is like EventEmitter<Void>();
  
 ** For better memory we have to unsubscribe the unwanted events after use 
    |- OnDestroy Interface that having OnDestroy method which helps to save memory
          ngOnDestroy(){
			this.subscription.unsubscribe();
			}	
	
Observable have 3 param 
   |-params
   |-error
   |-(){}

     ngOnInit() {
		this.activatedRoute.params.subscribe(
		 (params) => {
		  this.characters = this.swService.getCharacter(params.side);
         },
		 (error) => {},
		 () => {}
        );
       }   
	   
	  |- ng using observable to send the req and get the response
	  
-Http
 ==========
   |-in import section of app.module.js add HttpModule from the package '@angular/http'
   |-inject this service in constructor and create a local variable  
   |- this.http.get('https://swapi.co/api/people')   //not called any req
   |- this.http.get('https://swapi.co/api/people').subscribe()   //with the help of obseravable now req will be triggered
   
   No 'Access-Control-Allow-Origin' header is present on the requested resource” error when Postman does not?
    --diable-web-security in the browser shortcut --target properties 
	
	****example of getting values from request and modification 
		fetchCharacters() {
			this.http.get('http://swapi.co/api/people')
			.pipe(map((response: Response) => {
			console.log('FROM PIPE ' + response);
			const data = response.json();
			const extractedChars = data.results;
			const chars = extractedChars.map((char) => {
              return {name: char.name, side: ''};
				} );
				return chars;
				})
				)

		  .subscribe(  // , this.requestOptions
			(data) => {
				console.log(data);
				this.characters = data;
				}
				);
			// this.http.post('https://swapi.co/api/' ,{ });
		  }
		  
		  values are not immediately reflected on UI for that take the help of Subject(observable) 
				* A Subject is a special type of Observable that allows values to be multicasted to many Observables. Subjects are like EventEmitters.
				  Every Subject is an Observable and an Observer.You can subscribe to a Subject,and you can call next to feed values as well as error and complete.
 
CODE CLEANING 
======================
Common Module => Exports all the basic Angular directives and pipes, such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.Re-exported by `BrowserModule`, which is included      automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * * The `providers` options configure the NgModule's injector to provide
 * localization dependencies to members.
 * * The `exports` options make the declared directives and pipes available for import
 * by other NgModules. 
		     
			 
	Deployment 
    ==================
    ng build ---> it will not clean code 
    ng build --prod it will create minified code 	 and create dist folder that having importantly index file 
	while deploying code on the server --><base href="/"> means name if the project otherwise empty 
	and then upload the content of the build folder .
 
	   
 
 GIT
 +=============================================================
 git remote add origin "GitRepositoryLink"
 gir remote -v 
 
 for error git@github.com: Permission denied (publickey). fatal: Could not read from remote repository.
 git remote rm origin ->then add new remote -> git remote add origin --> git push origin master
 
 
 
 
 
 
 
 

 
